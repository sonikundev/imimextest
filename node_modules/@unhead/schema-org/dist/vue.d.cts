import { ComponentResolver } from 'unplugin-vue-components';
import * as _unhead_vue from '@unhead/vue';
import { MaybeComputedRefOrPromise } from '@unhead/vue';
import { P as PostalAddress, c as AggregateOffer, d as AggregateRating, e as Article, B as BreadcrumbList, C as Comment, E as Event, F as FoodEstablishment, V as VirtualLocation, f as Place, H as HowTo, g as HowToStep, I as ImageObject, J as JobPosting, L as LocalBusiness, O as Offer, h as OpeningHoursSpecification, i as Organization, j as Person, k as Product, Q as Question, l as Recipe, m as Review, n as VideoObject, W as WebPage, o as WebSite, p as Book, q as Course, r as ItemList, s as ListItem, t as Movie, u as SearchAction, v as ReadAction, w as SoftwareApp, x as BookEdition, A as Arrayable, T as Thing } from './shared/schema-org.6b61657a.cjs';
export { M as MetaInput, bc as PluginSchemaOrg, bd as SchemaOrgUnheadPlugin, bj as UserConfig } from './shared/schema-org.6b61657a.cjs';
import { defineComponent } from 'vue';
import '@unhead/schema';

interface SchemaOrgResolverOptions {
    /**
     * prefix for headless ui components used in templates
     *
     * @default ""
     */
    prefix?: string;
}
declare const schemaAutoImports: string[];
declare const schemaOrgAutoImports: {
    from: string;
    imports: string[];
}[];
declare const schemaOrgComponents: string[];
declare function SchemaOrgResolver(options?: SchemaOrgResolverOptions): ComponentResolver;

type DeepMaybeRef<T> = {
    [key in keyof T]?: MaybeComputedRefOrPromise<T[key]>;
};
declare function defineAddress<T extends Record<string, any>>(input?: DeepMaybeRef<PostalAddress & T>): DeepMaybeRef<PostalAddress & T>;
declare function defineAggregateOffer<T extends Record<string, any>>(input?: DeepMaybeRef<AggregateOffer & T>): DeepMaybeRef<AggregateOffer & T>;
declare function defineAggregateRating<T extends Record<string, any>>(input?: DeepMaybeRef<AggregateRating & T>): DeepMaybeRef<AggregateRating & T>;
declare function defineArticle<T extends Record<string, any>>(input?: DeepMaybeRef<Article & T>): DeepMaybeRef<Article & T>;
declare function defineBreadcrumb<T extends Record<string, any>>(input?: DeepMaybeRef<BreadcrumbList & T>): DeepMaybeRef<BreadcrumbList & T>;
declare function defineComment<T extends Record<string, any>>(input?: DeepMaybeRef<Comment & T>): DeepMaybeRef<Comment & T>;
declare function defineEvent<T extends Record<string, any>>(input?: DeepMaybeRef<Event & T>): DeepMaybeRef<Event & T>;
declare function defineFoodEstablishment<T extends Record<string, any>>(input?: DeepMaybeRef<FoodEstablishment & T>): DeepMaybeRef<FoodEstablishment & T>;
declare function defineVirtualLocation<T extends Record<string, any>>(input?: DeepMaybeRef<VirtualLocation & T>): DeepMaybeRef<VirtualLocation & T>;
declare function definePlace<T extends Record<string, any>>(input?: DeepMaybeRef<Place & T>): DeepMaybeRef<Place & T>;
declare function defineHowTo<T extends Record<string, any>>(input?: DeepMaybeRef<HowTo & T>): DeepMaybeRef<HowTo & T>;
declare function defineHowToStep<T extends Record<string, any>>(input?: DeepMaybeRef<HowToStep & T>): DeepMaybeRef<HowToStep & T>;
declare function defineImage<T extends Record<string, any>>(input?: DeepMaybeRef<ImageObject & T>): DeepMaybeRef<ImageObject & T>;
declare function defineJobPosting<T extends Record<string, any>>(input?: DeepMaybeRef<JobPosting & T>): DeepMaybeRef<JobPosting & T>;
declare function defineLocalBusiness<T extends Record<string, any>>(input?: DeepMaybeRef<LocalBusiness & T>): DeepMaybeRef<LocalBusiness & T>;
declare function defineOffer<T extends Record<string, any>>(input?: DeepMaybeRef<Offer & T>): DeepMaybeRef<Offer & T>;
declare function defineOpeningHours<T extends Record<string, any>>(input?: DeepMaybeRef<OpeningHoursSpecification & T>): DeepMaybeRef<OpeningHoursSpecification & T>;
declare function defineOrganization<T extends Record<string, any>>(input?: DeepMaybeRef<Organization & T>): DeepMaybeRef<Organization & T>;
declare function definePerson<T extends Record<string, any>>(input?: DeepMaybeRef<Person & T>): DeepMaybeRef<Person & T>;
declare function defineProduct<T extends Record<string, any>>(input?: DeepMaybeRef<Product & T>): DeepMaybeRef<Product & T>;
declare function defineQuestion<T extends Record<string, any>>(input?: DeepMaybeRef<Question & T>): DeepMaybeRef<Question & T>;
declare function defineRecipe<T extends Record<string, any>>(input?: DeepMaybeRef<Recipe & T>): DeepMaybeRef<Recipe & T>;
declare function defineReview<T extends Record<string, any>>(input?: DeepMaybeRef<Review & T>): DeepMaybeRef<Review & T>;
declare function defineVideo<T extends Record<string, any>>(input?: DeepMaybeRef<VideoObject & T>): DeepMaybeRef<VideoObject & T>;
declare function defineWebPage<T extends Record<string, any>>(input?: DeepMaybeRef<WebPage & T>): DeepMaybeRef<WebPage & T>;
declare function defineWebSite<T extends Record<string, any>>(input?: DeepMaybeRef<WebSite & T>): DeepMaybeRef<WebSite & T>;
declare function defineBook<T extends Record<string, any>>(input?: DeepMaybeRef<Book & T>): DeepMaybeRef<Book & T>;
declare function defineCourse<T extends Record<string, any>>(input?: DeepMaybeRef<Course & T>): DeepMaybeRef<Course & T>;
declare function defineItemList<T extends Record<string, any>>(input?: DeepMaybeRef<ItemList & T>): DeepMaybeRef<ItemList & T>;
declare function defineListItem<T extends Record<string, any>>(input?: DeepMaybeRef<ListItem & T>): DeepMaybeRef<ListItem & T>;
declare function defineMovie<T extends Record<string, any>>(input?: DeepMaybeRef<Movie & T>): DeepMaybeRef<Movie & T>;
declare function defineSearchAction<T extends Record<string, any>>(input?: DeepMaybeRef<SearchAction & T>): DeepMaybeRef<SearchAction & T>;
declare function defineReadAction<T extends Record<string, any>>(input?: DeepMaybeRef<ReadAction & T>): DeepMaybeRef<ReadAction & T>;
declare function defineSoftwareApp<T extends Record<string, any>>(input?: DeepMaybeRef<SoftwareApp & T>): DeepMaybeRef<SoftwareApp & T>;
declare function defineBookEdition<T extends Record<string, any>>(input?: DeepMaybeRef<BookEdition & T>): DeepMaybeRef<BookEdition & T>;
type UseSchemaOrgInput = Arrayable<DeepMaybeRef<Thing | Record<string, any>>>;
declare function useSchemaOrg(input: UseSchemaOrgInput): void | _unhead_vue.ActiveHeadEntry<_unhead_vue.UseHeadInput<{
    script: {
        nodes: UseSchemaOrgInput;
    };
}>>;

declare function defineSchemaOrgComponent(name: string, defineFn: (input: any) => any): ReturnType<typeof defineComponent>;
declare const SchemaOrgArticle: any;
declare const SchemaOrgBreadcrumb: any;
declare const SchemaOrgComment: any;
declare const SchemaOrgEvent: any;
declare const SchemaOrgFoodEstablishment: any;
declare const SchemaOrgHowTo: any;
declare const SchemaOrgImage: any;
declare const SchemaOrgJobPosting: any;
declare const SchemaOrgLocalBusiness: any;
declare const SchemaOrgOrganization: any;
declare const SchemaOrgPerson: any;
declare const SchemaOrgProduct: any;
declare const SchemaOrgQuestion: any;
declare const SchemaOrgRecipe: any;
declare const SchemaOrgReview: any;
declare const SchemaOrgVideo: any;
declare const SchemaOrgWebPage: any;
declare const SchemaOrgWebSite: any;
declare const SchemaOrgMovie: any;
declare const SchemaOrgCourse: any;
declare const SchemaOrgItemList: any;
declare const SchemaOrgBook: any;
declare const SchemaOrgSoftwareApp: any;

export { type DeepMaybeRef, SchemaOrgArticle, SchemaOrgBook, SchemaOrgBreadcrumb, SchemaOrgComment, SchemaOrgCourse, SchemaOrgEvent, SchemaOrgFoodEstablishment, SchemaOrgHowTo, SchemaOrgImage, SchemaOrgItemList, SchemaOrgJobPosting, SchemaOrgLocalBusiness, SchemaOrgMovie, SchemaOrgOrganization, SchemaOrgPerson, SchemaOrgProduct, SchemaOrgQuestion, SchemaOrgRecipe, SchemaOrgResolver, type SchemaOrgResolverOptions, SchemaOrgReview, SchemaOrgSoftwareApp, SchemaOrgVideo, SchemaOrgWebPage, SchemaOrgWebSite, type UseSchemaOrgInput, defineAddress, defineAggregateOffer, defineAggregateRating, defineArticle, defineBook, defineBookEdition, defineBreadcrumb, defineComment, defineCourse, defineEvent, defineFoodEstablishment, defineHowTo, defineHowToStep, defineImage, defineItemList, defineJobPosting, defineListItem, defineLocalBusiness, defineMovie, defineOffer, defineOpeningHours, defineOrganization, definePerson, definePlace, defineProduct, defineQuestion, defineReadAction, defineRecipe, defineReview, defineSchemaOrgComponent, defineSearchAction, defineSoftwareApp, defineVideo, defineVirtualLocation, defineWebPage, defineWebSite, schemaAutoImports, schemaOrgAutoImports, schemaOrgComponents, useSchemaOrg };
