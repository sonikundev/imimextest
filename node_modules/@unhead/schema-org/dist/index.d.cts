import { T as Thing, S as SchemaOrgNodeDefinition, a as SchemaOrgNode, M as MetaInput, R as ResolvedMeta, b as SchemaOrgGraph, A as Arrayable, P as PostalAddress, c as AggregateOffer, d as AggregateRating, e as Article, B as BreadcrumbList, C as Comment, E as Event, F as FoodEstablishment, V as VirtualLocation, f as Place, H as HowTo, g as HowToStep, I as ImageObject, J as JobPosting, L as LocalBusiness, O as Offer, h as OpeningHoursSpecification, i as Organization, j as Person, k as Product, Q as Question, l as Recipe, m as Review, n as VideoObject, W as WebPage, o as WebSite, p as Book, q as Course, r as ItemList, s as ListItem, t as Movie, u as SearchAction, v as ReadAction, w as SoftwareApp, x as BookEdition } from './shared/schema-org.6b61657a.cjs';
export { z as AggregateOfferSimple, G as AggregateRatingSimple, N as ArticleSimple, Z as BookEditionSimple, Y as BookSimple, a1 as BreadcrumbSimple, a4 as CommentSimple, a6 as CourseSimple, a8 as EventSimple, af as FoodEstablishmentSimple, am as HowToDirection, ai as HowToId, ah as HowToSimple, ak as HowToStepSimple, bm as Id, bl as IdReference, bg as Identity, aq as ImageSimple, ao as ItemListSimple, as as JobPostingSimple, au as ListItemSimple, aw as LocalBusinessSimple, ay as MovieSimple, be as NodeRelation, bf as NodeRelations, aT as NutritionInformation, aA as OfferSimple, aC as OpeningHoursSimple, bi as OptionalSchemaOrgPrefix, aE as OrganizationSimple, aG as PersonSimple, ad as PlaceSimple, bc as PluginSchemaOrg, ba as PluginSchemaOrgOptions, aI as PostalAddressSimple, U as PrimaryArticleId, $ as PrimaryBookId, a2 as PrimaryBreadcrumbId, a9 as PrimaryEventId, b1 as PrimaryWebPageId, b6 as PrimaryWebSiteId, aL as ProductId, aK as ProductSimple, aN as QuestionSimple, aQ as Rating, aP as RatingSimple, b3 as ReadActionInput, aU as RecipeId, aS as RecipeSimple, bh as ResolvableDate, aY as ReviewSimple, bd as SchemaOrgUnheadPlugin, b8 as SearchActionInput, aW as SoftwareAppSimple, bb as UnheadSchemaOrg, bj as UserConfig, a_ as VideoSimple, ab as VirtualLocationSimple, b0 as WebPageSimple, b5 as WebSiteSimple, bk as WithResolver, aJ as addressResolver, D as aggregateOfferResolver, K as aggregateRatingResolver, X as articleResolver, _ as bookEditionResolver, a0 as bookResolver, a3 as breadcrumbResolver, a5 as commentResolver, a7 as courseResolver, y as createSchemaOrgGraph, aa as eventResolver, ag as foodEstablishmentResolver, aj as howToResolver, an as howToStepDirectionResolver, al as howToStepResolver, ar as imageResolver, ap as itemListResolver, at as jobPostingResolver, av as listItemResolver, ax as localBusinessResolver, az as movieResolver, aB as offerResolver, aD as openingHoursResolver, aF as organizationResolver, aH as personResolver, ae as placeResolver, aM as productResolver, aO as questionResolver, aR as ratingResolver, b4 as readActionResolver, aV as recipeResolver, aZ as reviewResolver, b9 as searchActionResolver, aX as softwareAppResolver, a$ as videoResolver, ac as virtualLocationResolver, b2 as webPageResolver, b7 as webSiteResolver } from './shared/schema-org.6b61657a.cjs';
import * as _unhead_schema from '@unhead/schema';
import * as unhead from 'unhead';

declare function defineSchemaOrgResolver<T extends Thing>(schema: SchemaOrgNodeDefinition<T>): SchemaOrgNodeDefinition<T>;

/**
 * Dedupe, flatten and a collection of nodes. Will also sort node keys and remove meta keys.
 * @param nodes
 */
declare function dedupeNodes(nodes: SchemaOrgNode[]): SchemaOrgNode[];
declare function normaliseNodes(nodes: SchemaOrgNode[]): SchemaOrgNode[];

interface ResolverOptions {
    /**
     * Return single images as an object.
     */
    array?: boolean;
    /**
     * Move added nodes to the root graph.
     */
    root?: boolean;
    /**
     * Generates ids for nodes.
     */
    generateId?: boolean;
    afterResolve?: (node: any) => void;
}

declare function resolveMeta(meta: Partial<MetaInput>): ResolvedMeta;
declare function resolveNode<T extends Thing>(node: T, ctx: SchemaOrgGraph, resolver: SchemaOrgNodeDefinition<T>): T;
declare function resolveNodeId<T extends Thing>(node: T, ctx: SchemaOrgGraph, resolver: SchemaOrgNodeDefinition<T>, resolveAsRoot?: boolean): T;
declare function resolveRelation(input: Arrayable<any>, ctx: SchemaOrgGraph, fallbackResolver?: SchemaOrgNodeDefinition<any>, options?: ResolverOptions): any;

declare function defineAddress<T extends Record<string, any>>(input?: PostalAddress & T): PostalAddress & T;
declare function defineAggregateOffer<T extends Record<string, any>>(input?: AggregateOffer & T): AggregateOffer & T;
declare function defineAggregateRating<T extends Record<string, any>>(input?: AggregateRating & T): AggregateRating & T;
declare function defineArticle<T extends Record<string, any>>(input?: Article & T): Article & T;
declare function defineBreadcrumb<T extends Record<string, any>>(input?: BreadcrumbList & T): BreadcrumbList & T;
declare function defineComment<T extends Record<string, any>>(input?: Comment & T): Comment & T;
declare function defineEvent<T extends Record<string, any>>(input?: Event & T): Event & T;
declare function defineFoodEstablishment<T extends Record<string, any>>(input?: FoodEstablishment & T): FoodEstablishment & T;
declare function defineVirtualLocation<T extends Record<string, any>>(input?: VirtualLocation & T): VirtualLocation & T;
declare function definePlace<T extends Record<string, any>>(input?: Place & T): Place & T;
declare function defineHowTo<T extends Record<string, any>>(input?: HowTo & T): HowTo & T;
declare function defineHowToStep<T extends Record<string, any>>(input?: HowToStep & T): HowToStep & T;
declare function defineImage<T extends Record<string, any>>(input?: ImageObject & T): ImageObject & T;
declare function defineJobPosting<T extends Record<string, any>>(input?: JobPosting & T): JobPosting & T;
declare function defineLocalBusiness<T extends Record<string, any>>(input?: LocalBusiness & T): LocalBusiness & T;
declare function defineOffer<T extends Record<string, any>>(input?: Offer & T): Offer & T;
declare function defineOpeningHours<T extends Record<string, any>>(input?: OpeningHoursSpecification & T): OpeningHoursSpecification & T;
declare function defineOrganization<T extends Record<string, any>>(input?: Organization & T): Organization & T;
declare function definePerson<T extends Record<string, any>>(input?: Person & T): Person & T;
declare function defineProduct<T extends Record<string, any>>(input?: Product & T): Product & T;
declare function defineQuestion<T extends Record<string, any>>(input?: Question & T): Question & T;
declare function defineRecipe<T extends Record<string, any>>(input?: Recipe & T): Recipe & T;
declare function defineReview<T extends Record<string, any>>(input?: Review & T): Review & T;
declare function defineVideo<T extends Record<string, any>>(input?: VideoObject & T): VideoObject & T;
declare function defineWebPage<T extends Record<string, any>>(input?: WebPage & T): WebPage & T;
declare function defineWebSite<T extends Record<string, any>>(input?: WebSite & T): WebSite & T;
declare function defineBook<T extends Record<string, any>>(input?: Book & T): Book & T;
declare function defineCourse<T extends Record<string, any>>(input?: Course & T): Course & T;
declare function defineItemList<T extends Record<string, any>>(input?: ItemList & T): ItemList & T;
declare function defineListItem<T extends Record<string, any>>(input?: ListItem & T): ListItem & T;
declare function defineMovie<T extends Record<string, any>>(input?: Movie & T): Movie & T;
declare function defineSearchAction<T extends Record<string, any>>(input?: SearchAction & T): SearchAction & T;
declare function defineReadAction<T extends Record<string, any>>(input?: ReadAction & T): ReadAction & T;
declare function defineSoftwareApp<T extends Record<string, any>>(input?: SoftwareApp & T): SoftwareApp & T;
declare function defineBookEdition<T extends Record<string, any>>(input?: BookEdition & T): BookEdition & T;
type UseSchemaOrgInput = Arrayable<Thing | Record<string, any>>;
declare function useSchemaOrg(input: UseSchemaOrgInput): void | _unhead_schema.ActiveHeadEntry<unhead.UseHeadInput<{
    script: {
        nodes: UseSchemaOrgInput;
    };
}>>;

export { AggregateOffer, AggregateRating, Arrayable, Article, Book, BookEdition, BreadcrumbList, Comment, Course, Event, FoodEstablishment, HowTo, HowToStep, ImageObject, ItemList, JobPosting, ListItem, LocalBusiness, MetaInput, Movie, Offer, OpeningHoursSpecification, Organization, Person, Place, PostalAddress, Product, Question, ReadAction, Recipe, ResolvedMeta, Review, SchemaOrgGraph, SchemaOrgNode, SchemaOrgNodeDefinition, SearchAction, SoftwareApp, Thing, type UseSchemaOrgInput, VideoObject, VirtualLocation, WebPage, WebSite, dedupeNodes, defineAddress, defineAggregateOffer, defineAggregateRating, defineArticle, defineBook, defineBookEdition, defineBreadcrumb, defineComment, defineCourse, defineEvent, defineFoodEstablishment, defineHowTo, defineHowToStep, defineImage, defineItemList, defineJobPosting, defineListItem, defineLocalBusiness, defineMovie, defineOffer, defineOpeningHours, defineOrganization, definePerson, definePlace, defineProduct, defineQuestion, defineReadAction, defineRecipe, defineReview, defineSchemaOrgResolver, defineSearchAction, defineSoftwareApp, defineVideo, defineVirtualLocation, defineWebPage, defineWebSite, normaliseNodes, resolveMeta, resolveNode, resolveNodeId, resolveRelation, useSchemaOrg };
