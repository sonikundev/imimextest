import { defu } from "defu";
import { appendHeader } from "h3";
import { getOgImagePath, separateProps, useOgImageRuntimeConfig } from "../../shared.js";
import { createOgImageMeta, normaliseOptions } from "../utils.js";
import { createNitroRouteRuleMatcher } from "../../nitro/util/kit.js";
import { useNuxtApp, useRequestEvent, useRoute } from "#imports";
export function defineOgImage(_options = {}) {
  if (!import.meta.server)
    return;
  const nuxtApp = useNuxtApp();
  const ogImageInstances = nuxtApp.ssrContext._ogImageInstances || [];
  const route = useRoute();
  const basePath = route.path || "/";
  const routeRuleMatcher = createNitroRouteRuleMatcher();
  const routeRules = routeRuleMatcher(basePath).ogImage;
  if (!_options || nuxtApp.ssrContext?.event.context._nitro?.routeRules?.ogImage === false || typeof routeRules !== "undefined" && routeRules === false) {
    ogImageInstances.forEach((e) => {
      e.dispose();
    });
    nuxtApp.ssrContext._ogImageInstances = void 0;
    return;
  }
  const options = normaliseOptions({
    ..._options
  });
  if (route.query)
    options._query = route.query;
  const { defaults } = useOgImageRuntimeConfig();
  const resolvedOptions = normaliseOptions(defu(separateProps(_options), separateProps(routeRules), defaults));
  if (resolvedOptions.url) {
    createOgImageMeta(null, options, resolvedOptions, nuxtApp.ssrContext);
  } else {
    const path = getOgImagePath(basePath, resolvedOptions);
    if (import.meta.prerender)
      appendHeader(useRequestEvent(), "x-nitro-prerender", path);
    createOgImageMeta(path, options, resolvedOptions, nuxtApp.ssrContext);
  }
}
