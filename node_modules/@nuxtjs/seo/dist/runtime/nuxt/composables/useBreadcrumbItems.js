import { withoutTrailingSlash } from "ufo";
import { defu } from "defu";
import { pathBreadcrumbSegments } from "../../pure/breadcrumbs.js";
import {
  computed,
  createSitePathResolver,
  defineBreadcrumb,
  toValue,
  useI18n,
  useRoute,
  useRouter,
  useSchemaOrg,
  withSiteTrailingSlash
} from "#imports";
function withoutQuery(path) {
  return path.split("?")[0];
}
function titleCase(s) {
  return s.replaceAll("-", " ").replace(/\w\S*/g, (w) => w.charAt(0).toUpperCase() + w.substr(1).toLowerCase());
}
export function useBreadcrumbItems(options = {}) {
  const router = useRouter();
  const routes = router.getRoutes();
  const i18n = useI18n();
  const siteResolver = createSitePathResolver({
    canonical: true,
    absolute: true
  });
  const items = computed(() => {
    let rootNode = "/";
    if (i18n) {
      if (i18n.strategy === "prefix" || i18n.strategy !== "no_prefix" && toValue(i18n.defaultLocale) !== toValue(i18n.locale))
        rootNode = `/${toValue(i18n.locale)}`;
    }
    const current = withoutQuery(withoutTrailingSlash(toValue(options.path || useRoute().path) || rootNode));
    const overrides = options.overrides || [];
    const segments = pathBreadcrumbSegments(current, rootNode).map((path, index) => {
      let item = {
        to: path
      };
      if (typeof overrides[index] !== "undefined") {
        if (overrides[index] === false)
          return false;
        item = defu(overrides[index], item);
      }
      return item;
    });
    if (options.prepend)
      segments.unshift(...options.prepend);
    if (options.append)
      segments.push(...options.append);
    return segments.filter(Boolean).map((item) => {
      const route = routes.find((r) => withoutTrailingSlash(r.path) === withoutTrailingSlash(item.to));
      const routeMeta = route?.meta || {};
      const routeName = route ? String(route.name || route.path) : item.to === "/" ? "index" : "unknown";
      let [name] = routeName.split("___");
      if (name === "unknown")
        name = (item.to || "").split("/").pop() || "";
      if (routeMeta.breadcrumb) {
        item = {
          ...item,
          ...routeMeta.breadcrumb
        };
      }
      item.label = item.label || routeMeta.breadcrumbTitle || routeMeta.title;
      if (typeof item.label === "undefined") {
        item.label = item.label || i18n.t(`breadcrumb.items.${name}.label`, name === "index" ? "Home" : titleCase(name), { missingWarn: false });
        item.ariaLabel = item.ariaLabel || i18n.t(`breadcrumb.items.${name}.ariaLabel`, item.label, { missingWarn: false });
      }
      item.ariaLabel = item.ariaLabel || item.label;
      item.current = item.current || item.to === current;
      if (toValue(options.hideCurrent) && item.current)
        return false;
      return item;
    }).map((m) => {
      if (m && m.to) {
        m.to = withSiteTrailingSlash(m.to).value;
        if (m.to === rootNode && toValue(options.hideRoot))
          return false;
      }
      return m;
    }).filter(Boolean);
  });
  const schemaOrgEnabled = typeof options.schemaOrg === "undefined" ? true : options.schemaOrg;
  if (import.meta.server && schemaOrgEnabled) {
    useSchemaOrg([
      defineBreadcrumb(computed(() => {
        return {
          id: `#${options.id || "breadcrumb"}`,
          itemListElement: items.value.map((item) => ({
            name: item.label || item.ariaLabel,
            item: item.to ? siteResolver(item.to) : void 0
          }))
        };
      }))
    ]);
  }
  return items;
}
