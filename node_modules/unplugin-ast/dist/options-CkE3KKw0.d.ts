import { Arrayable } from '@antfu/utils';
import { ParserOptions } from '@babel/parser';
import { FilterPattern } from '@rollup/pluginutils';
import { a as Transformer } from './types-DtXuG18a.js';

interface Options {
    include?: FilterPattern;
    exclude?: FilterPattern | undefined;
    enforce?: 'post' | 'pre' | undefined;
    parserOptions?: ParserOptions;
    transformer?: Arrayable<Transformer<any>>;
}
type Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;
type OptionsResolved = Overwrite<Required<Options>, {
    exclude: Options['exclude'];
    enforce: Options['enforce'];
    transformer: Transformer<any>[];
}>;
declare function resolveOption(options: Options): OptionsResolved;

export { type Options as O, type OptionsResolved as a, resolveOption as r };
